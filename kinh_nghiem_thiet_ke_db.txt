1 Số kinh nghiệm thiết kế database
	1. Đặt tên cho bảng 
		Tên bảng cần dễ hiểu và đoán được mục đích lưu trữ của bảng, đồng thời sử dụng kí chữ hoa ở đầu tên
		Ví dụ : AdReport, CampaignGroupReport , chúng ta không nên đặt adreport,campaigngroupreport hoặc report
	2. Đặt tên số ít
		Chúng ta nên đặt tên số ít ví dụ : CampaignGroupReport, không cần thiết phải đặt tên CampaignGroupReports
	3. Không sử dụng dấu cách trong tên bảng
		Ví dụ : nên sử dụng CampaignGroupReport thay vì [Campaign Group Report]
	4. Sử dụng tên bảng gắn với ID là tên của trường Primary Key nếu có thế
		Ví dụ : CampaignGroupReportID
	5. Sử dụng kiểu Boolean để lưu giá trị yes/no và tên trường bắt đầu bằng Is
		Ví dụ : IsEnabled
	6. Add trường Audit để có thể biết rằng ai tạo thêm row và khi nào, ai sửa row và khi nào
	7. Sử dụng indexes để tăng tốc độ queries, với việc sử dụng Profile Analyser
	8. Sử dụng nvarchar để đảm bảo tất cả các ngôn ngữ được hỗ trợ
	9. Sử dụng varchar(max) khi thực sự cần thiết và nên tránh sử dụng ntext
	10.Chia nhỏ bảng nếu có thể để tăng tính linh động và mềm dẻo
		Việc làm này sẽ :
		+ Giảm dung lượng lưu trữ, vì khách hành có thể sẽ không bao giờ điền hết 5 trường Payment01,Payment02,..Payment05 
		nếu sử dụng bảng ban đầu ta phải lưu rất nhiều dữ liệu NULL
		+ Làm tăng tính mềm dẻo của hệ thống, nếu sau này hệ thống có thể có thêm nhiều hình thức thanh toán khác, 
		thì cũng không cần phải sửa lại bảng để thêm trường mới

2 Những sai lầm trong thiết kế cơ sở dữ liệu
	1. Bỏ qua mục đích của dữ liệu
	2. Chuẩn hóa yếu (3NF, 2NF hay thậm chí 1NF)
	3. Sự dư thừa
	4. Ràng buộc yếu
	5. Không tận dụng những tính năng của DB Engine
	6. Khóa chính kết hợp
	7. Chỉ mục yếu
	8. Quy tắc đặt tên không tốt
		Không giới hạn kích cỡ tên bảng/cột. Một cách tên ý nghĩa sẽ dễ hiểu và dễ nhớ hơn tên viết tắt.
		Tên giống nhau có cùng một ý nghĩa. Tránh đặt tên cho các trường giống nhau với những kiểu dữ liệu hoặc ý nghĩa khác nhau.
		Nếu không cần thiết, loại bỏ sự dừ thừa. Ví dụ trong bảng Item, thay vì ItemName, PriceOfItem, hoặc tương tự thì Name và Price là đủ.
		Tránh những từ khóa mặc định của DBE. Nếu một cột được gọi là Index, một từ khóa của SQL, thì cố gắng sử dụng một cái tên khác như IndexNumber.
		Nếu sử dụng khóa chính là cột số nguyên được sinh tự động, đặt tên cho nó là Id ở mọi bảng.
		Định nghĩa khóa ngoài khi nối bảng: thêm Id đằng trước tên bảng. Ví dụ IdItem
		Nếu đặt tên cho ràng buồng thì sử dụng tiền tố mô tả ràng buộc (vd: PK hoặc FK), theo sau là tên của bảng hoặc bảng liên quan. Dĩ nhiên, việc sử dụng gạch dưới _ phần nào đó khiến mọi thứ trở nên dễ đọc hơn.
		Để đặt tên cho chỉ mục, sử dụng tiền tố IDX đằng trước tên bảng và tên cột hoặc cột của chỉ mục. Đồng thời sử dụng UNIQUE làm tiền tố hoặc hậu tố nếu chỉ mục là duy nhất và sử dụng gạch dưới nếu cần thiết
		
3 Quy tắc thiết kế cơ sở dữ liệu (31 Quy tắc trong thiết kế Cơ sở dữ liệu)
	1. Không thể có nhiều giá trị trong 1 cột trong 1 bản ghi
		Ví dụ: Mr Vinh có 3 số điện thoại nhưng bản ghi của Mr Vinh không nên có 1 cột Telephone với 3 giá trị trong đó
	2. Càng ít bảng càng tốt.
	3. Khóa không nên dài quá
		Nếu bạn đang thử quyết định giữa xác định 1 khóa với 2 cột (ví dụ Mã SV và Email) và 1 khóa với 1 cột (ví dụ Mã SV), 
		cả 2 đều xác định duy nhất 1 dòng trong bảng, hãy lựa chọn khóa ngắn hơn trong 2 khóa. 
		Khi định nghĩa 1 khóa, bạn cần chắc chắn rằng tập hợp thông tin này là cần và đủ để xác định 1 hàng, không nên có thêm hoặc ít hơn thông tin
	4. Sử dụng tên được xác định rõ và phù hợp cho các bảng và cột
		ví dụ như trong bảng student: student_id thay vì chỉ dùng id).
	5. Sử dụng số ít cho tên bảng. Bảng thể hiện cho 1 tập các thực thể, không cần thiết phải sử dụng số nhiều.
		ví dụ student thay thế cho students
	6. Không dùng khoảng trắng cho tên bảng
		Tên bảng viết thường, nếu có nhiều hơn 1 từ thì sử dụng dấu gạch dưới, ví dụ: user_group, order_detail,…
	7. Không sử dụng tiền tố hoặc hậu tố không cần thiết cho tên bảng
		ví dụ đặt là student thay cho tblstudent, studenttable…
	8. Giữ mật khẩu được mã hóa để đảm bảo tính bảo mật. Giải mã mật khẩu trong ứng dụng nếu cần thiết.
	9. Sử dụng khóa chính là số nguyên trong mọi bảng. Nếu không có, hãy tạo một trường id để làm khóa chính.
	10.Lựa chọn các cột có kiểu giá trị số nguyên để đánh index
		Đánh index trường có kiểu dữ liệu ký tự có thể sẽ gây ra các vấn đề về hiệu năng.
	11.Sử dụng các trường bit để lưu các giá trị boolean
		Trường số nguyên hoặc ký tự là không cần thiết để lưu trữ trong trường hợp này. Với các trường này nên đặt tên với tiền tố “is_”.
	12.Cung cấp cơ chế xác thực khi truy cập CSDL. Không gán quyền admin cho mọi người dùng.
	13.Tránh sử dụng truy vấn “SELECT *” nếu không thực sự cần thiết
		Sử dụng truy vấn “SELECT {tên cột cần lấy}” để đảm bảo hiệu năng tốt hơn.
	14.Với các hệ thống CSDL lớn, nhạy cảm nên sử dụng các dịch vụ bảo mật và khôi phục sau thảm họa như failover clustering, sao lưu tự động, nhân rộng …
	15.Sử dụng các ràng buộc (khóa ngoại, kiểm tra, not null…) để đảm bảo toàn vẹn dữ liệu.
		Không nên đưa toàn bộ các ràng buộc này kiểm soát trên mã ứng dụng.
	16.Không được thiếu tài liệu CSDL
		Tài liệu hóa thiết kế CSDL với lược đồ ER và hướng dẫn. Đồng thời viết các dòng ghi chú (comment lines) cho các triggers, procedure và các scripts khác
	17.Sử dụng index cho các truy vấn được dùng thường xuyên với bảng dữ liệu lớn
		Các công cụ phân tích có thể được dùng để xác định cần đặt index tại đâu
		Với truy vấn cho kết quả là nhiều dòng thì sử dụng clustered index sẽ tốt hơn, với truy vấn cho kết quả là 1 dòng thì sử dụng non clustered sẽ tốt hơn.
	18.Máy chủ CSDL và máy chủ web nên để riêng biệt trên 2 server vật lý
		Việc này sẽ đảm bảo bảo mật hơn (kẻ tấn công không thể tấn công trực tiếp dữ liệu)
		Hiệu năng bộ nhớ và CPU của server sẽ tốt hơn do giảm tải số lượng yêu cầu và các tiến trình xử lý.
	19.Các cột dữ liệu blob và image không nên định nghĩa trong các bảng thường xuyên truy vấn do vấn đề hiệu năng.
		Những dữ liệu này phải được đặt tại các bảng riêng và chúng sẽ được trỏ tới từ bảng được truy vấn.
	20.Chuẩn hóa là cần thiết để tối ưu hiệu năng
		Chuẩn hóa ở mức thấp sẽ gây ra vấn đề dư thừa dữ liệu, chuẩn hóa quá sâu sẽ gây ra vấn đề join ở quá nhiều bảng. 
		Cả 2 loại chuẩn hóa trên đều gây ra các vấn đề về hiệu năng.
	21.Dành thời gian nhiều nhất có thể cho việc thiết kế và mô hình hóa CSDL. 
		Việc thiết kế sơ sài sẽ dẫn đến mất nhiều thời gian cho sửa đổi và bảo trì sau này.
	22.Giữ khóa chính ít ký tự hơn hoặc số nguyên. Xử lý sẽ tốt hơn với khóa chính nhỏ.
	23.Lưu trữ đường dẫn hình ảnh trong CSDL thay cho hình ảnh sẽ giúp giảm tải.
	24.Dùng các kiểu dữ liệu hợp lý cho các trường. Ví dụ: Ngày sinh nên để datetime thay vì varchar
	25.Sử dụng mệnh đề LIKE chính xác. Nếu bạn tìm kiếm chính xác thì sử dụng “=” thay thế.
	26.Sử dụng JOIN sẽ tốt hơn cho hiệu năng so với sử dụng các truy vấn con hoặc truy vấn lồng nhau.
	27.Sử dụng các stored procedure sẽ giúp nhanh hơn, bảo mật hơn và bảo trì tốt hơn.
	28.Viết các ghi chú để hướng dẫn các cán bộ phát triển sau. Tài liệu hóa cũng là cách tốt để giúp đỡ họ.
	29.Đánh index hợp lý sẽ giúp cải tiến tốc độ và hoạt động của CSDL.
	30.Đảm bảo có thể test được toàn bộ các chương trình liên quan đến CSDL.
	31.Viết từ khóa SQL bằng chữ in hoa để dễ đọc
	
4. Quy tắc
	1. Một số quy tắc chung về đặt tên
		Tên là danh từ tiếng Anh
		Chỉ dùng danh từ số ít (inventory , shelf , octopus)
		Chỉ dùng lower_case (customer)
		Chỉ dùng dấu gạch dưới _ để nối các từ (first_name)
		Tên có tính tự giải thích.Tránh dùng từ viết tắt.Tránh dùng kiểu dữ liệu thay cho tên (middle_name, blog .content , amt)
		Tránh dùng từ khóa của SQL (display_order , updated_at)
		Tên ngắn gọn, không nên dài quá 64 ký tự
	2. Table
		Đặt prefix cho các table liên quan (catalog_category , catalog_product)
		Thêm suffix _tmp cho các table dùng tạm trong tính toán nhưng không xóa (catalog_product_price_tmp)
		Thêm prefix tmp_ cho các table dùng tạm, có thể xóa (tmp_im_calculating)
	3. Column
		Tránh thêm tiền tố không cần thiết(	product.name).
		Thêm prefix is_ cho các field dạng YES/NO (is_active , is_delivered is_free_shipping)
		Nên lưu các thời điểm thay đổi dữ liệu với từng record (created_at , updated_at, deleted_at)
		Không đặt tên chứa kiểu dữ liệu (return_code)
	4. Primary Key
		Chỉ nên dùng PK là id (table .id)
		Mỗi table nên có 1 PK, bên cạnh các UNIQUE KEY khác (PRIMARY KEY (id),UNIQUE KEY idx_unique (key1,key2))
		PK mặc định nên dùng kiểu Interger, Auto-increment
	5. Foreign Keys
		Tên FK được kết hợp từ tên field và tên table mà nó tham chiếu tới (person_id là FK của table và field person.id)
		Tùy chọn Cascading Update có thể dùng, nhưng Cascading Delete thì nên tránh
	6. Indexes
		Thêm prefix idx_ ở đầu (idx_created_at)